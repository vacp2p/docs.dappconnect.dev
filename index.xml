<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Waku Connect Docs</title>
    <link>https://js.waku.guide/</link>
    <description>Recent content in Introduction on Waku Connect Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Dec 2021 14:00:00 +0100</lastBuildDate><atom:link href="https://js.waku.guide/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create the DApp and Install Dependencies</title>
      <link>https://js.waku.guide/docs/guides/vote_poll_sdk/dapp_creation/01_create_dapp/</link>
      <pubDate>Mon, 03 Jan 2022 11:00:00 +1100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/vote_poll_sdk/dapp_creation/01_create_dapp/</guid>
      <description>Create the DApp and Install Dependencies #  Create React App #  Create the new React app using the typescript template. Install the Waku Poll SDK packages.
To connect dapp with Wallet you can use any package that is compatible with ethers Web3Provider (e.g. @usedapp, web3-react).
Setup polyfills #  A number of Web3 dependencies need polyfills. Said polyfills must be explicitly declared when using webpack 5.
The latest react-scripts version uses webpack 5.</description>
    </item>
    
    <item>
      <title>Deploy smart contract</title>
      <link>https://js.waku.guide/docs/guides/vote_poll_sdk/vote_sdk/01_deploying_smart_contract/</link>
      <pubDate>Mon, 03 Jan 2022 11:00:00 +1100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/vote_poll_sdk/vote_sdk/01_deploying_smart_contract/</guid>
      <description>Deploy smart contract #  Creating new package #  For this deployment we will create a new package.
mkdir contract-deployment cd contract-deployment yarn init yarn add @waku/vote-sdk-contracts ethers ts-node typescript Create a tsconfig.json with:
{ &amp;#34;compilerOptions&amp;#34;: { &amp;#34;target&amp;#34;: &amp;#34;es2020&amp;#34;, &amp;#34;module&amp;#34;: &amp;#34;commonJS&amp;#34;, &amp;#34;esModuleInterop&amp;#34;: true, &amp;#34;moduleResolution&amp;#34;: &amp;#34;node&amp;#34;, &amp;#34;resolveJsonModule&amp;#34;: true, &amp;#34;noEmit&amp;#34;: true } } And now we can add a deploy script index.ts:
import { ContractFactory, getDefaultProvider, Wallet } from &amp;#34;ethers&amp;#34;; import VotingContract from &amp;#34;@waku/vote-sdk-contracts/build/VotingContract.</description>
    </item>
    
    <item>
      <title>How to Choose a Content Topic</title>
      <link>https://js.waku.guide/docs/guides/01_choose_content_topic/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/01_choose_content_topic/</guid>
      <description>How to Choose a Content Topic #  A content topic is used for content based filtering.
It allows you to filter out the messages that your dApp processes, both when receiving live messages (Relay) or retrieving historical messages (Store).
The format for content topics is as follows:
/{dapp-name}/{version}/{content-topic-name}/{encoding}
 dapp-name: The name of your dApp, it must be unique to avoid conflict with other dApps. version: We usually start at 1, useful when introducing breaking changes in your messages.</description>
    </item>
    
    <item>
      <title>Discovery &amp; Bootstrap Nodes</title>
      <link>https://js.waku.guide/docs/guides/discovery_bootstrap/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/discovery_bootstrap/</guid>
      <description>Discovery &amp;amp; Bootstrap Nodes #  This guide explains the discovery and bootstrap mechanisms currently available in js-waku, their benefits and caveats and how to use them.
Node discovery is the mechanism that enables a Waku node to find other nodes. Waku is a modular protocol, several discovery mechanisms are and will be included in Waku so that developers can select the best mechanism(s) based for their use case and the user&amp;rsquo;s environment (e.</description>
    </item>
    
    <item>
      <title>Connect to the Ethereum Wallet</title>
      <link>https://js.waku.guide/docs/guides/vote_poll_sdk/dapp_creation/02_connect_wallet/</link>
      <pubDate>Mon, 03 Jan 2022 11:00:00 +1100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/vote_poll_sdk/dapp_creation/02_connect_wallet/</guid>
      <description>Connect to the Ethereum Wallet #  This section may be skipped if you are adding the poll feature to an existing dApp that already connects to the user&amp;rsquo;s wallet. If you want to use ethers as a package to connect to web3 wallet you can follow this guide and skip the next step. Next step demonstrates how to use @useDapp for this purpose.  In this we will use ethers to keep amount of dependencies to minimum but feel free to use other packages.</description>
    </item>
    
    <item>
      <title>Creating Voting component</title>
      <link>https://js.waku.guide/docs/guides/vote_poll_sdk/vote_sdk/02_voting_creation/</link>
      <pubDate>Mon, 03 Jan 2022 11:00:00 +1100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/vote_poll_sdk/vote_sdk/02_voting_creation/</guid>
      <description>Create Voting component #  With the smart contract deployed we can go back to our dApp.
We assume that the skeleton for the dApp with connection to the wallet is already done, if not please go to dApp creation.
Create components #  Let&amp;rsquo;s start by creating a new folder components with file named Voting.tsx inside.
After that we can start with styling and defining which theme we will be using:</description>
    </item>
    
    <item>
      <title>Receive and Send Messages Using Waku Relay</title>
      <link>https://js.waku.guide/docs/guides/02_relay_receive_send_messages/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/02_relay_receive_send_messages/</guid>
      <description>Receive and Send Messages Using Waku Relay #  Waku Relay is a gossip protocol that enables you to send and receive messages. You can find Waku Relay&amp;rsquo;s specifications on Vac RFC.
Before starting, you need to choose a Content Topic for your dApp. Check out the how to choose a content topic guide to learn more about content topics.
For this guide, we are using a single content topic: /relay-guide/1/chat/proto.</description>
    </item>
    
    <item>
      <title>Connect to the Ethereum Wallet useDapp</title>
      <link>https://js.waku.guide/docs/guides/vote_poll_sdk/dapp_creation/03_connect_wallet_usedapp/</link>
      <pubDate>Mon, 03 Jan 2022 11:00:00 +1100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/vote_poll_sdk/dapp_creation/03_connect_wallet_usedapp/</guid>
      <description>Connect to the Ethereum Wallet #  This section may be skipped if you are adding the poll feature to an existing dApp that already connects to the user&amp;rsquo;s wallet. This section can be used instead of previous step. It demonstrates how to use @useDapp for wallet connection.  In this guide, we use useDApp to access the blockchain.
yarn add @usedapp/core@0.4.7 @usedapp/core must be frozen to version 0.4.7 due to incompatibility between minor versions of ethers.</description>
    </item>
    
    <item>
      <title>Use Voting Component</title>
      <link>https://js.waku.guide/docs/guides/vote_poll_sdk/vote_sdk/03_using_voting/</link>
      <pubDate>Mon, 03 Jan 2022 11:00:00 +1100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/vote_poll_sdk/vote_sdk/03_using_voting/</guid>
      <description>Use Voting Component #  Define Configuration #  Configure the dApp by setting:
 Address of the multicall smart contract of the target chain, Address of the voting smart contract, Your dApp name.  const VOTING_ADDRESS = &amp;#34;VOTING_ADDRESS&amp;#34;; const MULTICALL_ADDRESS = &amp;#34;MULTICALL_ADDRESS&amp;#34;; const DAPP_NAME = &amp;#34;YOUR_DAPP_NAME&amp;#34;; Use Waku Voting #  Now, we need a Waku voting object. For that, call useWakuVoting:
import { useWakuVoting } from &amp;#34;@waku/vote-sdk-react-hooks&amp;#34;; export function MainPage() { const { activate, deactivate, account, provider } = useWeb3Connect(SUPPORTED_CHAIN_ID); const wakuVoting = useWakuVoting( DAPP_NAME, VOTING_ADDRESS, provider, MULTICALL_ADDRESS ); } Display Voting Component #  Modify the MainPage to render a Voting component.</description>
    </item>
    
    <item>
      <title>Retrieve Messages Using Waku Store</title>
      <link>https://js.waku.guide/docs/guides/03_store_retrieve_messages/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/03_store_retrieve_messages/</guid>
      <description>Retrieve Messages Using Waku Store #  DApps running on a phone or in a browser are often offline: The browser could be closed or mobile app in the background.
Waku Relay is a gossip protocol. As a user, it means that your peers forward you messages they just received. If you cannot be reached by your peers, then messages are not relayed; relay peers do not save messages for later.</description>
    </item>
    
    <item>
      <title>Encrypt Messages Using Waku Message Version 1</title>
      <link>https://js.waku.guide/docs/guides/04_encrypt_messages_version_1/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/04_encrypt_messages_version_1/</guid>
      <description>Encrypt Messages Using Waku Message Version 1 #  The Waku Message format provides an easy way to encrypt messages using symmetric or asymmetric encryption. The encryption comes with several handy design requirements: confidentiality, authenticity and integrity. It also allows the sender to sign messages, see Sign Messages Using Waku Message Version 1 to learn how.
You can find more details about Waku Message Payload Encryption in 26/WAKU-PAYLOAD.
See Cryptographic Libraries for more details on the cryptographic libraries used by js-waku.</description>
    </item>
    
    <item>
      <title>Sign Messages Using a Web3 Wallet (EIP-712)</title>
      <link>https://js.waku.guide/docs/guides/sign_messages_web3_eip712/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/sign_messages_web3_eip712/</guid>
      <description>Sign Messages Using a Web3 Wallet (EIP-712) #  Depending on your use case, you may need users to certify the ownership of their Ethereum account. They can do so by using their wallet to sign data.
In this guide, we demonstrate how to use the Ethers.js library to request the user to sign typed data (EIP-712) and then broadcast the signature over Waku.
For this guide, we are build a dApp that implements 20/TOY-ETH-PM: A simple protocols for end-to-end encrypted messages where Ethereum accounts are used as identity.</description>
    </item>
    
    <item>
      <title>Sign Messages Using Waku Message Version 1</title>
      <link>https://js.waku.guide/docs/guides/05_sign_messages_version_1/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/05_sign_messages_version_1/</guid>
      <description>Sign Messages Using Waku Message Version 1 #  The Waku Message format provides an easy way to sign messages using elliptic curve cryptography.
It also allows the sender to encrypt messages, see Encrypt Messages Using Waku Message Version 1 to learn how.
You can find more details about Waku Message Payload Signature in 26/WAKU-PAYLOAD.
See Cryptographic Libraries for more details on the cryptographic libraries used by js-waku.
Create new keypair #  Generate a new keypair to sign your messages:</description>
    </item>
    
    <item>
      <title>Send Messages Using Waku Light Push</title>
      <link>https://js.waku.guide/docs/guides/06_light_push_send_messages/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/06_light_push_send_messages/</guid>
      <description>Send Messages Using Waku Light Push #  Waku Light Push enables a client to receive a confirmation when sending a message.
The Waku Relay protocol sends messages to connected peers but does not provide any information on whether said peers have received messages. This can be an issue when facing potential connectivity issues. For example, when the connection drops easily, or it is connected to a small number of relay peers.</description>
    </item>
    
    <item>
      <title>Receive and Send Messages Using Waku Relay With ReactJS</title>
      <link>https://js.waku.guide/docs/guides/07_reactjs_relay/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/07_reactjs_relay/</guid>
      <description>Receive and Send Messages Using Waku Relay With ReactJS #  It is easy to use Waku Connect with ReactJS. In this guide, we will demonstrate how your ReactJS dApp can use Waku Relay to send and receive messages.
Before starting, you need to choose a Content Topic for your dApp. Check out the how to choose a content topic guide to learn more about content topics. For this guide, we are using a single content topic: /min-react-js-chat/1/chat/proto.</description>
    </item>
    
    <item>
      <title>Retrieve Messages Using Waku Store With ReactJS</title>
      <link>https://js.waku.guide/docs/guides/08_reactjs_store/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/08_reactjs_store/</guid>
      <description>Retrieve Messages Using Waku Store With ReactJS #  It is easy to use Waku Connect with ReactJS. In this guide, we will demonstrate how your ReactJS dApp can use Waku Store to retrieve messages.
DApps running on a phone or in a browser are often offline: The browser could be closed or mobile app in the background.
Waku Relay is a gossip protocol. As a user, it means that your peers forward you messages they just received.</description>
    </item>
    
    <item>
      <title>Send and Receive Messages Using Waku Relay With Angular v13</title>
      <link>https://js.waku.guide/docs/guides/angular_relay/</link>
      <pubDate>Tue, 15 Feb 2022 09:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/angular_relay/</guid>
      <description>Send and Receive Messages Using Waku Relay With Angular v13 #  It is easy to use Waku Connect with Angular v13.
In this guide, we will demonstrate how your Angular dApp can use Waku Relay to send and receive messages.
Before starting, you need to choose a Content Topic for your dApp. Check out the how to choose a content topic guide to learn more about content topics.
For this guide, we are using a single content topic: /relay-angular-chat/1/chat/proto.</description>
    </item>
    
    <item>
      <title>Nwaku Service Node</title>
      <link>https://js.waku.guide/docs/guides/nwaku/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/nwaku/</guid>
      <description>Nwaku Service Node #  JS-Waku nodes join the Waku network by connecting to service nodes using secure websocket.
Nwaku (prev. nim-waku) is the reference implementation of the Waku v2 protocol and can be used as a service node.
When using { bootstrap: { default: true } }, the js-waku node connects to a fleet of nwaku nodes operated by Status.
It is also possible to deploy your own nwaku node by following these instructions.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://js.waku.guide/docs/introduction/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/introduction/</guid>
      <description>JS-Waku Docs #  The js-waku library has recently been refactored to achieve a number of production readiness goals. Hence, the code snippets present in this documentation are outdated.
Until the doc is updated, the best way to learn how to use js-waku is to check out the examples repository.
Learn more about the refactoring here.
 Waku Connect is a suite of libraries, SDKs and documentations to help you use Waku in your dApp.</description>
    </item>
    
    <item>
      <title>Create-A-Poll Button</title>
      <link>https://js.waku.guide/docs/guides/vote_poll_sdk/poll_sdk/01_create-a-poll_button/</link>
      <pubDate>Mon, 03 Jan 2022 11:00:00 +1100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/vote_poll_sdk/poll_sdk/01_create-a-poll_button/</guid>
      <description>Create-A-Poll Button #  Create the Poll component. It will allow the user to create a new poll, view polls and answer them. We&amp;rsquo;ll start by adding a button to create a poll.
mkdir components touch components/Poll.tsx Styled-components #  Again, create a Wrapper for styling:
import styled from &amp;#34;styled-components&amp;#34;; const Wrapper = styled.div` display: flex; flex-direction: column; align-items: center; max-width: 1146px; position: relative; margin: 0 auto; padding: 150px 32px 50px; width: 100%; @media (max-width: 1146px) { max-width: 780px; } @media (max-width: 600px) { padding: 132px 16px 32px; } @media (max-width: 425px) { padding: 96px 16px 84px; } `; Button #  Create a button that will display the PollCreation component on click.</description>
    </item>
    
    <item>
      <title>Poll Creation Component</title>
      <link>https://js.waku.guide/docs/guides/vote_poll_sdk/poll_sdk/02_poll_creation/</link>
      <pubDate>Mon, 03 Jan 2022 11:00:00 +1100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/vote_poll_sdk/poll_sdk/02_poll_creation/</guid>
      <description>Poll Creation Component #  The Poll SDK provides an off-the-shelf component to create a new poll: PollCreation. It takes in a WakuPolling hook that can created with useWakuPolling.
useWakuPolling takes:
 appName: Your app name. It is used to generate a unique content topic for your polls. See How to Choose a Content Topic for more information. tokenAddress: The address of your ERC-20 token. Only token holders can create and answer polls.</description>
    </item>
    
    <item>
      <title>Poll List Component</title>
      <link>https://js.waku.guide/docs/guides/vote_poll_sdk/poll_sdk/03_poll_list/</link>
      <pubDate>Mon, 03 Jan 2022 11:00:00 +1100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/vote_poll_sdk/poll_sdk/03_poll_list/</guid>
      <description>Poll List Component #  To display existing polls, the PollList component is provided.
Simply add it to the Poll function to render it. It needs the account variable that can be passed as a property to Poll:
components/Poll.tsx:
import React, { useMemo, useState } from &amp;#34;react&amp;#34;; import styled from &amp;#34;styled-components&amp;#34;; import { PollCreation, PollList } from &amp;#34;@waku/poll-sdk-react-components&amp;#34;; import { Web3Provider } from &amp;#34;@ethersproject/providers&amp;#34;; import { useWakuPolling } from &amp;#34;@waku/poll-sdk-react-hooks&amp;#34;; import { CreateButton } from &amp;#34;@waku/vote-poll-sdk-react-components&amp;#34;; import { Theme } from &amp;#34;@waku/vote-poll-sdk-react-components/dist/esm/src/style/themes&amp;#34;; type PollProps = { appName: string; library: Web3Provider | undefined; account: string | null | undefined; theme: Theme; tokenAddress: string; multicallAddress: string; }; export function Poll({ appName, library, account, theme, tokenAddress, multicallAddress, }: PollProps) { const [showPollCreation, setShowPollCreation] = useState(false); const wakuPolling = useWakuPolling( appName, tokenAddress, library, multicallAddress ); const disabled = useMemo(() =&amp;gt; !</description>
    </item>
    
    <item>
      <title>How to Debug your Waku dApp</title>
      <link>https://js.waku.guide/docs/guides/debug/</link>
      <pubDate>Mon, 31 Jan 2022 00:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/guides/debug/</guid>
      <description>How to Debug your Waku dApp #  Enable Debug Logs #  JS-Waku and its most relevant dependencies (libp2p) uses debug to handle logs.
NodeJS #  To enable debug logs when running js-waku with NodeJS, simply set the DEBUG environment variable.
To only enable js-waku debug logs:
export DEBUG=waku* To enable js-waku and libp2p debug logs:
export DEBUG=waku*,libp2p* To enable all debug logs:
export DEBUG=* Browser #  To see the debug logs in your browser&amp;rsquo;s console, you need to modify the local storage and add debug key.</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>https://js.waku.guide/docs/quick_start/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/quick_start/</guid>
      <description>Quick Start #  In this section you will learn how to receive and send messages using Waku Relay.
A more in depth guide for Waku Relay can be found here.
Install #  Install the js-waku package:
npm install js-waku # or with yarn yarn add js-waku Start a waku node #  import { Waku } from &amp;#34;js-waku&amp;#34;; const waku = await Waku.create({ bootstrap: { default: true } }); Listen for messages #  The contentTopic is a metadata string that allows categorization of messages on the waku network.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://js.waku.guide/docs/faq/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 +1000</pubDate>
      
      <guid>https://js.waku.guide/docs/faq/</guid>
      <description>FAQ #  Frequently Asked Questions for developers using js-waku:
1. Why should I build a frontend only webapp (no NodeJS backend)? #  Waku enables dApp to add communication, e.g. interaction between users, in a fully decentralized manner. A webapp that uses NodeJS as a backend implies that a party runs said NodeJS software in a centralized infrastructure.
Despite using Waku &amp;amp; Ethereum, such webapp cannot become decentralized.
By building a frontend only webapp, that entirely runs in the browser, one can distribute the frontend code in many manners: host it, mirror it, have it on GitHub, deploy it on IPFS, etc.</description>
    </item>
    
    <item>
      <title>Use Cases</title>
      <link>https://js.waku.guide/docs/use_cases/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://js.waku.guide/docs/use_cases/</guid>
      <description>Use Cases #  Waku is a generalized communication network. It can enable numerous use cases, both person-to-person (e.g. messenger) and machine-to-machine (e.g. state channels).
This is a non-exhaustive list of use cases that we have considered and their current status.
If we are aware of other projects using js-waku and other use cases that could be implemented, feel free to open a PR.
Legend:
 Live: We are aware of projects who have implemented this use case.</description>
    </item>
    
    <item>
      <title>Presentations &amp; Videos</title>
      <link>https://js.waku.guide/docs/presentations/</link>
      <pubDate>Wed, 12 Jan 2022 01:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/presentations/</guid>
      <description>Presentations &amp;amp; Videos #  21 Apr 2022 - Secureum TrustX - Waku: Enabling a New Dimension for dApps #    Presenter: Corey Petty.
22 Mar 2022 - Avalanche Summit #    Presenter: Corey Petty.
27 Jan 2022 - Web 3.0 Conference #    Presenter: Franck Royer. mirror: https://odysee.com/@Waku:c/2022-07-web3-conference:5
17 Sep 2021 - EthOnline #  Pre-recorded video for hackathon participants.
  Presenter: Franck Royer.</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://js.waku.guide/docs/examples/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/examples/</guid>
      <description>Examples #  JS-Waku Examples Repository #  We maintain a number of examples in the waku-org/js-waku-examples repository.
These examples use the latest published version of js-waku.
Community Examples #  Here are examples from the community.
Uber-like minimalistic car sharing app suing Vue.js #  Code: TheBojda/waku-uber.
Article: Decentralized Uber: Here&amp;rsquo;s How I Built It With Status.im, Waku, and Vue.js.
Demonstrates:
 Vue.js Waku Relay Protobuf using protons  </description>
    </item>
    
    <item>
      <title>Cryptographic Libraries</title>
      <link>https://js.waku.guide/docs/crypto_libraries/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/crypto_libraries/</guid>
      <description>Cryptographic Libraries #  A note on the cryptographic libraries used as it is a not a straightforward affair.
Asymmetric encryption #  Uses ecies-geth which in turns uses SubtleCrypto Web API (browser), secp256k1 (native binding for node) or elliptic (pure JS if none of the other libraries are available).
Symmetric encryption #  Uses SubtleCrypto Web API (browser) or NodeJS&#39; crypto module.</description>
    </item>
    
    <item>
      <title>Implemented Waku Protocols</title>
      <link>https://js.waku.guide/docs/waku_protocols/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://js.waku.guide/docs/waku_protocols/</guid>
      <description>Waku Protocol Support #  You can track progress on the project board.
 ✔: Supported 🚧: Implementation in progress ⛔: Support is not planned     Spec Implementation Status     6/WAKU1 ⛔   7/WAKU-DATA ⛔   8/WAKU-MAIL ⛔   9/WAKU-RPC ⛔   10/WAKU2 🚧   11/WAKU2-RELAY ✔   12/WAKU2-FILTER    13/WAKU2-STORE ✔ (querying node only)   14/WAKU2-MESSAGE ✔   15/WAKU2-BRIDGE    16/WAKU2-RPC ⛔   17/WAKU2-RLNRELAY    18/WAKU2-SWAP    19/WAKU2-LIGHTPUSH ✔   20/TOY-ETH-PM ✔ (as example)   21/WAKU2-FTSTORE ✔   22/TOY-CHAT ✔ (as example)   25/LIBP2P-DNS-DISCOVERY 🚧   26/WAKU2-PAYLOAD ✔    </description>
    </item>
    
  </channel>
</rss>
